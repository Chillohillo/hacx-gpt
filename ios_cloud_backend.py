#!/usr/bin/env python3
"""
Kickbase iOS Cloud Backend
==========================

FastAPI-basiertes Cloud-Backend f√ºr die iOS Kickbase App.
Bietet REST API Endpoints f√ºr alle iOS-spezifischen Features.

Features:
- REST API f√ºr iOS Shortcuts
- Push Notifications f√ºr iOS
- Cloud-Synchronisation
- Offline-Daten-Caching
- iOS Widget Support
- Siri Integration

Author: AI Assistant
Version: 2.0.0-iOS-Backend
License: MIT
"""

from fastapi import FastAPI, HTTPException, Depends, BackgroundTasks, Header
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
import uvicorn
from pydantic import BaseModel
from typing import Dict, List, Optional, Any
import asyncio
import aiohttp
import json
import sqlite3
from datetime import datetime, timedelta
import logging
from pathlib import Path
import os
from dataclasses import dataclass
import redis
from cryptography.fernet import Fernet
import hashlib
import jwt
from contextlib import asynccontextmanager

# Logging Setup
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Security
security = HTTPBearer()

# Pydantic Models f√ºr API
class KickbaseCredentials(BaseModel):
    email: str
    password: str
    league_id: str

class PlayerRecommendation(BaseModel):
    name: str
    action: str  # "KAUFEN" or "VERKAUFEN"
    confidence: float
    price: str
    trend: str
    expected_points: Optional[float] = None

class TeamValue(BaseModel):
    total_value: float
    change_percent: float
    change_absolute: float
    last_updated: datetime

class InjuredPlayer(BaseModel):
    name: str
    injury_type: str
    expected_return: Optional[str] = None
    severity: str

class LineupPlayer(BaseModel):
    position: str
    name: str
    expected_points: float
    market_value: float

class AIAnalysisRequest(BaseModel):
    question: str
    context: Optional[Dict] = None

class NotificationRequest(BaseModel):
    title: str
    body: str
    data: Optional[Dict] = None
    ios_device_tokens: List[str]

@dataclass
class IOSBackendConfig:
    """Konfiguration f√ºr iOS Backend"""
    jwt_secret: str = os.getenv("JWT_SECRET", "your-secret-key")
    redis_url: str = os.getenv("REDIS_URL", "redis://localhost:6379")
    apns_key_path: str = os.getenv("APNS_KEY_PATH", "")
    apns_key_id: str = os.getenv("APNS_KEY_ID", "")
    apns_team_id: str = os.getenv("APNS_TEAM_ID", "")
    bundle_id: str = "com.kickbase.ultimate.ios"

# Global Konfiguration
config = IOSBackendConfig()

# Redis Connection f√ºr Caching
try:
    redis_client = redis.from_url(config.redis_url)
except Exception as e:
    logger.warning(f"Redis nicht verf√ºgbar: {e}")
    redis_client = None

# FastAPI App
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    logger.info("üöÄ Kickbase iOS Backend startet...")
    init_database()
    yield
    # Shutdown
    logger.info("üõë Kickbase iOS Backend beendet")

app = FastAPI(
    title="Kickbase iOS Ultimate Backend",
    description="Cloud Backend f√ºr iOS Kickbase Ultimate Analyzer",
    version="2.0.0",
    lifespan=lifespan
)

# CORS f√ºr iOS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # In Produktion spezifischer setzen
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

def init_database():
    """Initialisiert SQLite Datenbank"""
    db_path = Path("ios_backend.db")
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # Benutzer Tabelle
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            email TEXT UNIQUE,
            password_hash TEXT,
            league_id TEXT,
            ios_device_token TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            last_login TIMESTAMP
        )
    """)
    
    # Cache Tabelle f√ºr Offline-Daten
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS cache (
            key TEXT PRIMARY KEY,
            value TEXT,
            expires_at TIMESTAMP,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    
    # Notifications Log
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS notifications (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            title TEXT,
            body TEXT,
            sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    """)
    
    conn.commit()
    conn.close()
    logger.info("‚úÖ Datenbank initialisiert")

def verify_token(credentials: HTTPAuthorizationCredentials = Depends(security)):
    """JWT Token Verification"""
    try:
        payload = jwt.decode(credentials.credentials, config.jwt_secret, algorithms=["HS256"])
        return payload
    except jwt.ExpiredSignatureError:
        raise HTTPException(status_code=401, detail="Token expired")
    except jwt.JWTError:
        raise HTTPException(status_code=401, detail="Invalid token")

def cache_set(key: str, value: Any, ttl: int = 3600):
    """Setzt Cache-Wert (Redis oder SQLite)"""
    if redis_client:
        redis_client.setex(key, ttl, json.dumps(value))
    else:
        # Fallback zu SQLite
        conn = sqlite3.connect("ios_backend.db")
        cursor = conn.cursor()
        expires_at = datetime.now() + timedelta(seconds=ttl)
        cursor.execute(
            "INSERT OR REPLACE INTO cache (key, value, expires_at) VALUES (?, ?, ?)",
            (key, json.dumps(value), expires_at)
        )
        conn.commit()
        conn.close()

def cache_get(key: str) -> Optional[Any]:
    """Holt Cache-Wert"""
    if redis_client:
        value = redis_client.get(key)
        return json.loads(value) if value else None
    else:
        # Fallback zu SQLite
        conn = sqlite3.connect("ios_backend.db")
        cursor = conn.cursor()
        cursor.execute(
            "SELECT value FROM cache WHERE key = ? AND expires_at > ?",
            (key, datetime.now())
        )
        result = cursor.fetchone()
        conn.close()
        return json.loads(result[0]) if result else None

# API Endpoints

@app.get("/")
async def root():
    """Health Check"""
    return {
        "app": "Kickbase iOS Ultimate Backend",
        "version": "2.0.0",
        "status": "healthy",
        "timestamp": datetime.now().isoformat()
    }

@app.post("/api/auth/login")
async def login(credentials: KickbaseCredentials):
    """Login und JWT Token generieren"""
    # Hier w√ºrde normalerweise die Kickbase API authentifizierung stattfinden
    # F√ºr Demo-Zwecke generieren wir direkt einen Token
    
    payload = {
        "email": credentials.email,
        "league_id": credentials.league_id,
        "exp": datetime.utcnow() + timedelta(days=30)
    }
    
    token = jwt.encode(payload, config.jwt_secret, algorithm="HS256")
    
    return {
        "access_token": token,
        "token_type": "bearer",
        "expires_in": 2592000  # 30 Tage
    }

@app.get("/api/update")
async def update_data(background_tasks: BackgroundTasks, user: dict = Depends(verify_token)):
    """Aktualisiert alle Kickbase Daten"""
    
    # Cache pr√ºfen
    cache_key = f"update_data_{user['league_id']}"
    cached_data = cache_get(cache_key)
    
    if cached_data:
        return cached_data
    
    # Background Task f√ºr Datenupdate
    background_tasks.add_task(fetch_kickbase_data, user['league_id'])
    
    response = {
        "status": "success",
        "message": "Datenupdate gestartet",
        "timestamp": datetime.now().isoformat()
    }
    
    # Cache f√ºr 5 Minuten
    cache_set(cache_key, response, 300)
    
    return response

@app.get("/api/recommendations", response_model=List[PlayerRecommendation])
async def get_recommendations(limit: int = 10, user: dict = Depends(verify_token)):
    """Holt Top Transferempfehlungen"""
    
    cache_key = f"recommendations_{user['league_id']}_{limit}"
    cached_recommendations = cache_get(cache_key)
    
    if cached_recommendations:
        return cached_recommendations
    
    # Simulierte Empfehlungen (in Realit√§t von ML-Modell)
    recommendations = [
        PlayerRecommendation(
            name="Erling Haaland",
            action="KAUFEN",
            confidence=92.5,
            price="‚Ç¨25.5M",
            trend="+15%",
            expected_points=12.8
        ),
        PlayerRecommendation(
            name="Jamal Musiala",
            action="KAUFEN",
            confidence=88.3,
            price="‚Ç¨18.2M",
            trend="+12%",
            expected_points=10.2
        ),
        PlayerRecommendation(
            name="Thomas M√ºller",
            action="VERKAUFEN",
            confidence=85.1,
            price="‚Ç¨12.1M",
            trend="-8%",
            expected_points=6.5
        )
    ][:limit]
    
    # Cache f√ºr 1 Stunde
    cache_set(cache_key, [rec.dict() for rec in recommendations], 3600)
    
    return recommendations

@app.get("/api/team/value", response_model=TeamValue)
async def get_team_value(user: dict = Depends(verify_token)):
    """Holt aktuellen Teamwert"""
    
    cache_key = f"team_value_{user['league_id']}"
    cached_value = cache_get(cache_key)
    
    if cached_value:
        return TeamValue(**cached_value)
    
    # Simulierte Teamwert-Daten
    team_value = TeamValue(
        total_value=125.2,
        change_percent=2.1,
        change_absolute=2.6,
        last_updated=datetime.now()
    )
    
    # Cache f√ºr 30 Minuten
    cache_set(cache_key, team_value.dict(), 1800)
    
    return team_value

@app.get("/api/injuries", response_model=List[InjuredPlayer])
async def get_injuries(user: dict = Depends(verify_token)):
    """Holt Verletzungsinformationen"""
    
    cache_key = f"injuries_{user['league_id']}"
    cached_injuries = cache_get(cache_key)
    
    if cached_injuries:
        return [InjuredPlayer(**injury) for injury in cached_injuries]
    
    # Simulierte Verletzungsdaten
    injuries = [
        InjuredPlayer(
            name="Manuel Neuer",
            injury_type="Wadenverletzung",
            expected_return="2 Wochen",
            severity="mittel"
        ),
        InjuredPlayer(
            name="Leon Goretzka",
            injury_type="Muskelfaserriss",
            expected_return="1 Woche",
            severity="leicht"
        )
    ]
    
    # Cache f√ºr 2 Stunden
    cache_set(cache_key, [injury.dict() for injury in injuries], 7200)
    
    return injuries

@app.post("/api/lineup/optimize", response_model=List[LineupPlayer])
async def optimize_lineup(formation: str = "4-3-3", budget_limit: int = 200000000, user: dict = Depends(verify_token)):
    """Optimiert Aufstellung"""
    
    cache_key = f"lineup_{user['league_id']}_{formation}_{budget_limit}"
    cached_lineup = cache_get(cache_key)
    
    if cached_lineup:
        return [LineupPlayer(**player) for player in cached_lineup]
    
    # Simulierte optimale Aufstellung
    optimal_lineup = [
        LineupPlayer(position="TW", name="Manuel Neuer", expected_points=8.5, market_value=8.0),
        LineupPlayer(position="IV", name="Dayot Upamecano", expected_points=7.2, market_value=15.5),
        LineupPlayer(position="IV", name="Matthijs de Ligt", expected_points=7.8, market_value=22.0),
        LineupPlayer(position="LV", name="Alphonso Davies", expected_points=9.1, market_value=18.5),
        LineupPlayer(position="RV", name="Benjamin Pavard", expected_points=6.9, market_value=12.0),
        LineupPlayer(position="ZM", name="Joshua Kimmich", expected_points=10.5, market_value=28.0),
        LineupPlayer(position="ZM", name="Jamal Musiala", expected_points=11.2, market_value=18.2),
        LineupPlayer(position="ZM", name="Leon Goretzka", expected_points=8.8, market_value=16.0),
        LineupPlayer(position="ST", name="Harry Kane", expected_points=13.5, market_value=35.0),
        LineupPlayer(position="LF", name="Kingsley Coman", expected_points=9.8, market_value=20.0),
        LineupPlayer(position="RF", name="Leroy San√©", expected_points=10.1, market_value=25.0)
    ]
    
    # Cache f√ºr 4 Stunden
    cache_set(cache_key, [player.dict() for player in optimal_lineup], 14400)
    
    return optimal_lineup

@app.get("/api/market/trends")
async def get_market_trends(user: dict = Depends(verify_token)):
    """Holt Markttrends"""
    
    cache_key = f"market_trends_{user['league_id']}"
    cached_trends = cache_get(cache_key)
    
    if cached_trends:
        return cached_trends
    
    # Simulierte Markttrends
    trends = {
        "trending_up": [
            "Erling Haaland (+15%)",
            "Jamal Musiala (+12%)",
            "Florian Wirtz (+10%)"
        ],
        "trending_down": [
            "Thomas M√ºller (-8%)",
            "Serge Gnabry (-6%)",
            "Joshua Kimmich (-4%)"
        ],
        "bargains": [
            "Niclas F√ºllkrug (‚Ç¨8.5M, +20% Potenzial)",
            "Maximilian Beier (‚Ç¨6.2M, +18% Potenzial)",
            "Tim Kleindienst (‚Ç¨4.8M, +25% Potenzial)"
        ]
    }
    
    # Cache f√ºr 1 Stunde
    cache_set(cache_key, trends, 3600)
    
    return trends

@app.post("/api/ai/analyze")
async def ai_analyze(request: AIAnalysisRequest, user: dict = Depends(verify_token)):
    """AI-Analyse basierend auf Benutzerfrage"""
    
    # Simulierte AI-Antwort
    analysis = f"""
    **AI-Analyse zu: "{request.question}"**
    
    Basierend auf den aktuellen Daten und ML-Modellen empfehle ich:
    
    üéØ **Sofortige Ma√ünahmen:**
    ‚Ä¢ **Erling Haaland kaufen** - 92% Wahrscheinlichkeit f√ºr Wertsteigerung
    ‚Ä¢ **Thomas M√ºller verkaufen** - √úberteuert, erwarteter R√ºckgang -8%
    
    üìä **Datengrundlage:**
    ‚Ä¢ Analysierte Spieler: 547
    ‚Ä¢ ML-Modell Genauigkeit: 94.2%
    ‚Ä¢ Konfidenzintervall: 88-96%
    
    üí° **Zus√§tzliche Insights:**
    ‚Ä¢ N√§chstes Marktwert-Update: Heute 22:00 Uhr
    ‚Ä¢ Verletzungsrisiko in Ihrem Team: Niedrig
    ‚Ä¢ Erwarteter Wochengewinn: +‚Ç¨3.2M
    
    ‚ö†Ô∏è **Risiken:**
    ‚Ä¢ Internationale Pause k√∂nnte Werte beeinflussen
    ‚Ä¢ Transferfenster-Aktivit√§t beobachten
    """
    
    return {
        "analysis": analysis,
        "confidence": 92.5,
        "timestamp": datetime.now().isoformat(),
        "model_version": "v2.0.0"
    }

@app.get("/api/summary/daily")
async def get_daily_summary(user: dict = Depends(verify_token)):
    """T√§gliche Zusammenfassung"""
    
    cache_key = f"daily_summary_{user['league_id']}_{datetime.now().date()}"
    cached_summary = cache_get(cache_key)
    
    if cached_summary:
        return cached_summary
    
    # Simulierte Tages-Zusammenfassung
    summary = {
        "team_value_change": "+‚Ç¨2.6M (+2.1%)",
        "new_injuries": "2 neue Verletzungen",
        "top_recommendation": "Haaland kaufen (92% Konfidenz)",
        "points_yesterday": 87,
        "league_position": 3,
        "upcoming_matches": 5,
        "market_opportunities": 12
    }
    
    # Cache bis Mitternacht
    cache_set(cache_key, summary, 86400)
    
    return {"summary": summary}

@app.post("/api/notifications/send")
async def send_notification(request: NotificationRequest, background_tasks: BackgroundTasks):
    """Sendet Push-Notification an iOS Ger√§te"""
    
    # Background Task f√ºr Notification
    background_tasks.add_task(send_ios_push_notification, request)
    
    return {
        "status": "queued",
        "message": "Notification wird versendet",
        "recipients": len(request.ios_device_tokens)
    }

@app.get("/api/widgets/team-value")
async def widget_team_value(user: dict = Depends(verify_token)):
    """Widget-Daten f√ºr Teamwert"""
    
    team_value = await get_team_value(user)
    
    return {
        "title": "üí∞ Teamwert",
        "value": f"{team_value.total_value}M‚Ç¨",
        "change": f"{team_value.change_percent:+.1f}%",
        "color": "green" if team_value.change_percent > 0 else "red",
        "last_updated": team_value.last_updated.isoformat()
    }

@app.get("/api/widgets/top-transfers")
async def widget_top_transfers(user: dict = Depends(verify_token)):
    """Widget-Daten f√ºr Top-Transfers"""
    
    recommendations = await get_recommendations(limit=3, user=user)
    
    widget_items = []
    for rec in recommendations:
        color = "green" if rec.action == "KAUFEN" else "red"
        widget_items.append({
            "name": rec.name,
            "action": rec.action,
            "confidence": f"{rec.confidence:.0f}%",
            "color": color
        })
    
    return {
        "title": "üöÄ Top Transfers",
        "items": widget_items
    }

# Background Tasks

async def fetch_kickbase_data(league_id: str):
    """Background Task: Kickbase Daten abrufen"""
    logger.info(f"üîÑ Aktualisiere Daten f√ºr Liga {league_id}")
    
    # Hier w√ºrde die echte Kickbase API Integration stattfinden
    await asyncio.sleep(2)  # Simuliere API-Call
    
    logger.info(f"‚úÖ Daten f√ºr Liga {league_id} aktualisiert")

async def send_ios_push_notification(request: NotificationRequest):
    """Background Task: iOS Push Notification senden"""
    logger.info(f"üì± Sende Notification: {request.title}")
    
    # Hier w√ºrde die APNS Integration stattfinden
    # F√ºr Demo loggen wir nur
    for token in request.ios_device_tokens:
        logger.info(f"üì≤ Notification an {token[:10]}... gesendet")
    
    await asyncio.sleep(1)  # Simuliere APNS-Call
    
    logger.info(f"‚úÖ {len(request.ios_device_tokens)} Notifications versendet")

# Entwicklungsserver
if __name__ == "__main__":
    uvicorn.run(
        "ios_cloud_backend:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )