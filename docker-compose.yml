version: '3.8'

services:
  kickbase-analyzer:
    build: .
    container_name: kickbase-ultimate-analyzer
    restart: unless-stopped
    
    environment:
      - KICKBASE_EMAIL=${KICKBASE_EMAIL}
      - KICKBASE_PASSWORD=${KICKBASE_PASSWORD}
      - KICKBASE_LEAGUE_ID=${KICKBASE_LEAGUE_ID}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GROK_API_KEY=${GROK_API_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - LOG_LEVEL=INFO
    
    volumes:
      - ./kickbase_data:/app/kickbase_data
      - ./exports:/app/exports
      - ./logs:/app/logs
      - ./cache:/app/cache
      - ./config.yaml:/app/config.yaml:ro
    
    ports:
      - "8050:8050"  # Für Dashboard (falls aktiviert)
    
    command: ["python3", "kickbase_ultimate_analyzer.py", "--mode", "scheduler"]
    
    depends_on:
      - redis
      - postgres
    
    networks:
      - kickbase-network

  # Redis für Caching
  redis:
    image: redis:7-alpine
    container_name: kickbase-redis
    restart: unless-stopped
    
    volumes:
      - redis-data:/data
    
    networks:
      - kickbase-network

  # PostgreSQL für persistente Datenspeicherung
  postgres:
    image: postgres:15-alpine
    container_name: kickbase-postgres
    restart: unless-stopped
    
    environment:
      - POSTGRES_DB=kickbase
      - POSTGRES_USER=kickbase
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-kickbase123}
    
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    
    ports:
      - "5432:5432"
    
    networks:
      - kickbase-network

  # Nginx für Web Interface (Optional)
  nginx:
    image: nginx:alpine
    container_name: kickbase-nginx
    restart: unless-stopped
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./exports:/usr/share/nginx/html/reports:ro
      - ./ssl:/etc/nginx/ssl:ro
    
    depends_on:
      - kickbase-analyzer
    
    networks:
      - kickbase-network

  # Grafana für Monitoring (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: kickbase-grafana
    restart: unless-stopped
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    
    ports:
      - "3000:3000"
    
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    networks:
      - kickbase-network

  # Prometheus für Metriken (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: kickbase-prometheus
    restart: unless-stopped
    
    ports:
      - "9090:9090"
    
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    
    networks:
      - kickbase-network

volumes:
  redis-data:
  postgres-data:
  grafana-data:
  prometheus-data:

networks:
  kickbase-network:
    driver: bridge